heat_template_version: 2016-10-14
description: A simple auto scaling group, only scaling up
resources:
#
# The auto scaling group defines a number of servers
# (between 1 and 5, starting with the desired number of
# 2 servers)
#
  my_servers:
    type: OS::Heat::AutoScalingGroup
    properties:
      cooldown: 60
      desired_capacity: 2
      max_size: 5
      min_size: 1
      resource:
#
# Servers are configured to run a mindless memory user
#
        type: OS::Nova::Server
        properties:
          config_drive: true
          image: 'ubuntu'
          flavor: d3
          networks:
            - network: private
          metadata: {"metering.server_group": "myapp"}
          user_data_format: RAW
          user_data: 
            get_file: /home/ubuntu/pressure.sh
#
# Scaling policy is linked to autoscaling group
#
  how_to_scale_up:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: my_servers }
      cooldown: 60
      scaling_adjustment: 1
#
# Alarm processing with Ceilometer
# The parameters define the alarm (meter, stats, period,
# threshold, comparison operator). The alarm_actions
# property has Heat generate a URL and defines Heat's
# action when it receives the alarm: Invoking a scaling policy.
#
  memory_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if average memory usage > 500MB
      metric: memory.usage
      aggregation_method: mean
      comparison_operator: gt
      threshold: 500
      resource_type: instance
      query: '{"=": {"server_group": "myapp"}}'
      granularity: 60
      evaluation_periods: 1
      alarm_actions:
        - { get_attr: [how_to_scale_up, alarm_url] }

